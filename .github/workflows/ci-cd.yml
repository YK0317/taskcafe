name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "Linting failed but continuing..."

    - name: Run security audit
      run: npm audit --audit-level=moderate || true

    - name: Run tests with coverage
      run: npm run test:ci

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.sha }}
        path: |
          coverage/
          junit.xml
        retention-days: 7
      if: always()

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
      if: success()

  build-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: quality-assurance
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Docker image
      run: |
        docker build -t taskcafe:${{ github.sha }} .
        docker tag taskcafe:${{ github.sha }} taskcafe:latest

    - name: Save Docker image
      run: docker save taskcafe:${{ github.sha }} -o taskcafe-image.tar

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          taskcafe-image.tar
          dist/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-package
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}

    - name: Load Docker image
      run: docker load -i taskcafe-image.tar

    - name: Deploy to staging
      env:
        JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
        DB_URI: ${{ secrets.STAGING_DB_URI }}
      run: |
        echo "JWT_SECRET=$JWT_SECRET" > .env
        echo "DB_URI=$DB_URI" >> .env
        echo "NODE_ENV=staging" >> .env
        docker compose up -d

    - name: Wait for service to be ready
      run: |
        echo "Waiting for service to start..."
        sleep 30

    - name: Verify deployment
      run: |
        curl -f http://localhost:3000/api/health || exit 1
        echo "Staging deployment successful!"

    - name: Send deployment notification
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ ! -z "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"Staging deployment ${{ job.status }}: ${{ github.event.head_commit.message }}"}' \
            $SLACK_WEBHOOK
        fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-assurance, build-package]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}

    - name: Load Docker image
      run: docker load -i taskcafe-image.tar

    - name: Deploy to production
      env:
        JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
        DB_URI: ${{ secrets.PROD_DB_URI }}
      run: |
        echo "JWT_SECRET=$JWT_SECRET" > .env
        echo "DB_URI=$DB_URI" >> .env
        echo "NODE_ENV=production" >> .env
        docker compose up -d

    - name: Wait for service to be ready
      run: |
        echo "Waiting for service to start..."
        sleep 30

    - name: Verify production deployment
      run: |
        curl -f http://localhost:3000/api/health || exit 1
        echo "Production deployment successful!"

    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: taskcafe-image.tar
        generate_release_notes: true
        tag_name: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send production deployment notification
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ ! -z "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"Production deployment ${{ job.status }}: ${{ github.ref_name }}"}' \
            $SLACK_WEBHOOK
        fi
